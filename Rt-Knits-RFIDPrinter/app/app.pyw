# ----------------------------------------------------------------------
# Author : Jefferson Li
# Contact Email : jeffersonli2013@gmail.com
# Date : 2024-01-29
# Git Repo : https://github.com/Jeffersonlii/Rt-Knits-FindSample
# ----------------------------------------------------------------------

import subprocess
from flask import Flask, jsonify, render_template, request
from print_service import PrinterService
import sys, os

# if this app is ran as a executable (compiled by pyinstaller)
isRunningAsExecutable = getattr(sys, 'frozen', False)

if isRunningAsExecutable:
    exe_path = os.path.dirname(sys.executable)

    # manually link the templates and statics
    template_folder = os.path.join(exe_path, 'templates')
    static_folder = os.path.join(exe_path, 'static')
    app = Flask(__name__, template_folder=template_folder, static_folder=static_folder)
else:
    app = Flask(__name__)

ps = PrinterService()

# ------------ WEB ENDPOINTS -----------------
# These endpoints print a simple RFID sticker containing only the sampleid
@app.route('/')
def home():
    return render_template('index.html')
@app.route('/zebra')
@app.route('/zebra/')
def zebra():
    return render_template('zebra_index.html')

# ------------ FILE ENDPOINTS -----------------
# These endpoints can be called from FileMaker using "Insert from URL" to print labels for samples 
# The sampleid will also be written on the RFID label's EPC Field
# ex. FileMaker Script 
#   Set Variable [ $url ; Value: "http://127.0.0.1:8003/RFIDprint/mySampleId?copies=2" ]
#   Insert from URL [ Select ; With dialog: Off ; Target:$_ ; $result ; $url ; cURL options: "-X POST" ]

# Prints a simply RFID sticker containing only the SampleID
@app.route('/RFIDprint/<sampleid>', methods=['POST'])
def print_label(sampleid: str):
    copies = request.args.get('copies', default = 1, type = int)

    # validate input
    try:
        if(not int(copies) > 0):
            copies = 1
    except:
        copies = 1

    global ps_err
    global ps
    ps_err = ps.connect()

    err = ps.printSimpleLabel(sampleid, copies=copies)
    respObj = {
        "chainway_status" : "fail" if ps_err or err else "success",
        "chainway_error_code" : f'{ps_err} \n {err}'
    }
    return jsonify(respObj)

# Prints a Customer Sample Sticker. 
# The template of the sticker is found at `static/StickerTemplates/CustomerSampleSticker.prn`
# This template contains raw ZPL code and can be generated by using CustomerSampleStickerDesign.nlbl (opened by ZebraDesigner)
# The Template file follows the following convention for variables
#   the field <SampleID> in the nlbl file may be updated to value "12345SG" by including the following pair in the json body to this request
#   {... , "SampleID" : "12345SG"}
@app.route('/customerStickerPrint/<sampleid>', methods=['POST'])
def customer_sticker_print(sampleid: str):
    copies = request.args.get('copies', default = 1, type = int)
    customer_sticker_data = request.get_json()

    # validate input
    try:
        if(not int(copies) > 0):
            copies = 1
    except:
        copies = 1
    
    global ps_err
    global ps
    ps_err = ps.connect()

    err = ps.printCustomerSampleLabel(sampleid, customer_sticker_data, copies=copies)
    respObj = {
        "chainway_status" : "fail" if ps_err or err else "success",
        "chainway_error_code" : f'{ps_err} \n {err}'
    }
    return jsonify(respObj)

# ------------ main -----------------
if __name__ == '__main__':
    if isRunningAsExecutable:
        cms = ' && '.join([
            "echo RFID Printer Service Started, check http://127.0.0.1:8003 to confirm",
            "echo Docs : https://github.com/Jeffersonlii/Rt-Knits-FindSample/tree/main/Rt-Knits-RFIDPrinter",
            "echo You may stop/kill this service by running kill_printer_service.bat"
        ])
        print("hello")
        subprocess.Popen(f'cmd /k "{cms}"', creationflags=subprocess.CREATE_NEW_CONSOLE)
    else:
        welcome = """
                RFID Printer Service
            ----------------------------------
            This service exposes an endpoint for the Filemaker App 'Printer Sample Sticker' under 'Sample Room SAM'.
            It runs on localhost:8003 and should run on startup.

            Docs : https://github.com/Jeffersonlii/Rt-Knits-FindSample/tree/main/Rt-Knits-RFIDPrinter
            ----------------------------------
        """
        print(welcome)
    app.run(port=8003, debug=not isRunningAsExecutable)

 